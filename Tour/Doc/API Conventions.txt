Namespaces and folders
----------------------------------------------------------------------------------------------------------------
V1           - was added because become possible to develop several versions in one solution (and it is important 
			   for "one developer army"). 
Abstractions - assembly DashboardCode.AdminkaV1 phisically located in the folder named 'DashboardCode\AdminkaV1\Abstractions' 
		       to avoid "AdminkaV1\Adminka" tautology and because Abstractions put folder to the first place in folders list.
XxxDom - Folders/Subnamespace in the root assembly DashboardCode.AdminkaV1 allways starts with 'Dom' prefix to indicate
		 that this folder/subnamespace is located exactly in root assembly. e.g.  DashboardCode.AdminkaV1.AuthenticationDom
		 opposite to names like 'DashboardCode.AdminkaV1.DataAccessEfCore' that has its own assembly

Wcf.Service        - wcf or rest service
Wcf.ODataService   - wcf or rest service
WcfService.Client - Wcf service reference wrapped into class
XxxApp       - StartUp projects (command line or web)
XxxExtensibles     - Api Extensibles (e.g. NLogTools)


Suffixes used in class names
----------------------------------------------------------------------------------------------------------------
Factory    - class contains only Create* methods (that have parameters);  all returned instances instantioned calling the methods
Container  - class contains only Resolve* methods (getters that doesn't have parameters)
Transients - class contains only  Resolve* methods ; all returned instances instantioned in class cunstructor; so all instances has the same life cycle
Adapter    - class that gets functors in constructor and provide methods to execute functors directly (functor->interface)
Facade     - class that gets several interfaces, functors in constructor, each Facade's method 
			 combines calls to them
Handler    - classes which provides (Hanlde methods) try{..}catch{} or using(..){..} funcitonal way 
Extensions - static extensions

Suffixes in method names
----------------------------------------------------------------------------------------------------------------
Compose    - creates delegate instance, not virtual (create interface if need virtual method to return delegate and use Make)
Create     - creates instance and return it, not virtual
Make       - creates instance and return it, virtual
Build      - return void (or bool or other type with the same meaning), virtual
(verb)     - not virtual, tools method

Find       - return single istance, there is indexed search inside
Grab       - return single istance, there foreach loop inside
Get        - return single istance, there is member operations inside
List       - return IReadOnlyList
Handle     - try .. catch or smth like it inside, parameters are delegates
Resolve    - "container" type objects method, both virtual and not virtual, but without parameters (except type parameter)
 
Static classes
----------------------------------------------------------------------------------------------------------
Manager    - singleton services, only one in project and handle very different functionalities, usually have a state, 
	         usually contains factory methods.
Extensions - pure extensions method (no state), many task oriented files 
Constants  - static class with only const definitions 

Type members
------------------------------------------------------------------------------------------------------------
is, has, can, should - prefixes for bool configuration-like fields
Get vs Resolve vs Create - when Create build new in method, Resolve build new but somewhere in internals, 
		Get - something else, and never interface method

Complex Routine and Share Resources Thoughts
----------------------------------------------------------------------------------------------------------
Summary: Nice but not actual.
1) One clear case known: Authentication sub routine. Special new routine can be builded that can help to reuse 
   DbContext between main and authentication sub routine (authentication sub routine should not close it).
2) Other case is "MVC redirect". There routine using mvc "TempData"  can be passed between redirects. 
   But how this works with assync mvc methods? 
   Note: it is not actual for main Web API that should be main usage pattern.
3) Correlation token helps a lot to understand routine's sequence during logs analyzes.

Why Routines.Configuration do not depend on Routines?
----------------------------------------------------------------------------------------------------------
They can be binded thoug IResolver and IResolvable<T> (Routines.Configuration could use them) but there is better
way then bind two libs through this interfaces: find the same interfaces in System library.
1) IResolvable<T>
	this inteface is replaced with System.IProgress<T> (It is absolutely the same abstraction if you can abstract from names too)
2) IReslover
    I would prefer to find such basic interface (one methtod T Xxx<T>() ) in .NET Framework System 
	libs, but there are no good candidates. But I'm still waiting. May be in future releases.
    And since it is only one interface left that can be used as depedency between Routines.Configuration and Routines
	it was easy eliminate that depedency defining an adapter (for Routines.Configuration.IConfigurationContainer). 
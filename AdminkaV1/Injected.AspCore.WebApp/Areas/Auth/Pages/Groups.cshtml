@page
@model GroupsModel

@{
    ViewData["SubTitle"] = "Groups";
    var UserContext = (DashboardCode.AdminkaV1.UserContext)ViewBag.UserContext;
    var tableId = "adminka-table-groups-id";
}
<h3 class="px-3">Groups</h3>

<table id="@tableId" class="table table-hover table-bordered mainTable">
    <thead>
        <tr>
            <th class="adminka-action-button-group">
                @if (UserContext.HasPrivilege(Privilege.ConfigureSystem))
                {
                    <a class="btn-sm" asp-area="Auth" asp-page="GroupCreate"><span class="material-icons">note_add</span></a>
                }
            </th>
            <th>
                ID
            </th>
            <th>
                Name
            </th>
            <th>
                AD Group
            </th>
            <th>
                Users
            </th>
            <th>
                Roles
            </th>
            <th>
                Privileges
            </th>

        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.List)
        {
            <tr>
                <td class="adminka-action-button-group">
                    <div class="d-flex flex-row">
                        <a class="btn-sm" asp-area="Auth" asp-page="Group" asp-route-id="@item.GroupId"><span class="material-icons">insert_drive_file</span></a>
                        @if (UserContext.HasPrivilege(Privilege.ConfigureSystem))
                        {
                            <div class="d-flex flex-column">
                                <a class="btn-xsm" asp-area="Auth" asp-page="GroupEdit" asp-route-id="@item.GroupId"><span class="material-icons">edit</span></a>
                                <a class="btn-xsm" asp-area="Auth" asp-page="GroupDelete" asp-route-id="@item.GroupId"><span class="material-icons">delete</span></a>
                            </div>
                        }
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.GroupId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.GroupName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.GroupAdName)
                </td>
                <td>
                    @foreach (var u in item.GetUsers())
                    {
                        <a class="badge" asp-area="Auth" asp-page="User" asp-route-id="@u.UserId">@u.LoginName</a>
                    }
                </td>
                <td>
                    @foreach (var r in item.GetRoles())
                    {
                        <a class="badge" asp-area="Auth" asp-page="Role" asp-route-id="@r.RoleId">@r.RoleName</a>
                    }
                </td>
                <td>
                    @foreach (var p in item.GetPrivileges())
                    {
                        if (p.Item2)
                        {
                            <a class="badge" asp-area="Auth" asp-page="Privilege" asp-route-id="@p.Item1.PrivilegeId">@p.Item1.PrivilegeName</a>
                        }
                        else
                        {
                            <a class="badge scratched" asp-area="Auth" asp-page="Privilege" asp-route-id="@p.Item1.PrivilegeId" style="text-decoration:line-through">@p.Item1.PrivilegeName</a>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
asdassaa 
@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            var tableId = '@tableId';
            const urlSearchParams = new URLSearchParams(window.location.search);
            const urlNameValuePair = 'filter';
            // TODO: add page num, per page, order (desc)
            // TODO: alternatively add scroll to page
            const filter = urlSearchParams.get(urlNameValuePair);
            if (filter) {
                
                var localStorageKey = 'DataTables_' + tableId + '_' + window.location.pathname; 
                var localStorageTextValue = window.localStorage.getItem(localStorageKey);
                var newValue = null;
                if (localStorageTextValue) {
                    var localStorageValue = JSON.parse(localStorageTextValue);
                    if (localStorageValue.search) {
                        localStorageValue.search.search = filter;
                    } else {
                        localStorageValue.search = { 'search': filter };
                    }
                    newValue = JSON.stringify(localStorageValue);
                     
                } else {
                    newValue = JSON.stringify({ 'search': { 'search': filter } });
                }
                window.localStorage.setItem(localStorageKey, newValue);
            }
            var $table = $('#' +tableId).dataTable(
                {
                    language: { search: "", searchPlaceholder: "Filter", lengthMenu:"_MENU_" },
                    stateSave: true,
                    dom: '<"d-flex flex-row justify-content-end"f>rt<"d-flex flex-row justify-content-between"lp>',
                    "columnDefs": [
                        { "searchable": false, "targets": 0 },
                        { "orderable": false, "targets": 0 }
                    ]
                }
            );
            $table.on('draw.dt', function () {
                console.log('draw');
                $table.find('td.adminka-action-button-group a').each(
                    function (i, e) {
                        e.href;
                    }
                );
            }).on('search.dt', function () {
                console.log('search');
                var filter = $table.api().search(); // without parameters return filter box the value
                // TODO: add page num, per page, order (desc)
                var locationWithoutQuery = location.toString().replace(location.search, "")
                var pageName = locationWithoutQuery.split("/").pop();
                var pageNameSearchParams = new URLSearchParams(window.location.search);
                if (filter) {
                    pageNameSearchParams.set(urlNameValuePair, filter)
                }
                else {
                    pageNameSearchParams.delete(urlNameValuePair);
                }
                var newPageNameWithQuery = pageName;
                var newParams = pageNameSearchParams.toString();
                if (newParams)
                    newPageNameWithQuery += '?' + newParams;
                history.replaceState(history.state /*old state, TODO: check null as alternative*/, null /*no titile*/, newPageNameWithQuery);
            });
        });
    </script>
}
